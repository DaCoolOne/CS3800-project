
    ; Stack pointer reg
    .ALIAS __SP 0x0

    ; Regs for allocating additional memory
    .ALIAS __ALLOC_SIZE 0x1
    .ALIAS __ALLOC_HEAD 0x2
    .ALIAS __ALLOC_NXT_POSITION 0x3
    .ALIAS __ALLOC_TEMP  0x4
    .ALIAS __ALLOC_TEMP2 0x5

    ; General purpose registers
    .ALIAS __REG_A 0xA
    .ALIAS __REG_B 0xB
    .ALIAS __REG_C 0xC
    .ALIAS __REG_D 0xD
    .ALIAS __REG_E 0xE
    .ALIAS __REG_F 0xF

    ; Startup and init
    SET __SP __STACK_BEGIN
    SET __ALLOC_HEAD __ALLOC_BEGIN
    JMP main

    ; Important functions

; Allocate a block of dynamic memory
__ALLOC_BLOCK:
    MOV __ALLOC_NXT_POSITION __ALLOC_HEAD
__ALLOC_BLOCK_LOOP_START:
    MOV __ALLOC_TEMP __ALLOC_NXT_POSITION
    LD __ALLOC_NXT_POSITION
    CJMP __ALLOC_NXT_POSITION __ALLOC_BLOCK_LOOP_2
    RJMP __ALLOC_AT_END
__ALLOC_BLOCK_LOOP_2:
    MOV __ALLOC_TEMP2 __ALLOC_NXT_POSITION
    ADDI __ALLOC_TEMP2 0x3
    LD __ALLOC_TEMP2
    ADD __ALLOC_TEMP __ALLOC_TEMP __ALLOC_TEMP2
    SUB __ALLOC_TEMP2 __ALLOC_TEMP __ALLOC_NXT_POSITION
    GTEQ __ALLOC_TEMP2 __ALLOC_SIZE __ALLOC_TEMP2
    CJMP __ALLOC_TEMP2 __ALLOC_BLOCK_SPOT_FOUND
    RJMP __ALLOC_BLOCK_LOOP_START

    ; The complicated one
__ALLOC_BLOCK_SPOT_FOUND:
    
    RET

__ALLOC_AT_END:
    MOV __ALLOC_NXT_POSITION __ALLOC_TEMP
    ADDI __ALLOC_NXT_POSITION 3
    LD __ALLOC_NXT_POSITION
    ADD __ALLOC_NXT_POSITION __ALLOC_NXT_POSITION __ALLOC_TEMP
    SET __ALLOC_TEMP2 0
    ST __ALLOC_TEMP2 __ALLOC_NXT_POSITION
    INC __ALLOC_NXT_POSITION
    ST __ALLOC_TEMP __ALLOC_NXT_POSITION
    INC __ALLOC_NXT_POSITION
    ST __ALLOC_SIZE __ALLOC_NXT_POSITION
    INC __ALLOC_NXT_POSITION
    ST __ALLOC_TEMP2 __ALLOC_NXT_POSITION
    MOV __ALLOC_SIZE __ALLOC_TEMP
    RET

main:
    SET __ALLOC_SIZE 4
    CALL __ALLOC_BLOCK
    RJMP main




__STACK_BEGIN:
    ; This will all get overwritten anyways. We just need to buffer the space a little so we don't overwrite the stack when creating dynamic memory


__ALLOC_BEGIN:
    ;Sentinel memory node
    ; .DATA 0 0 4 1

    ; Testing
__ALLOC_1:
    .DATA __ALLOC_2 0  8 1            1 2 3 4
__ALLOC_2:
    .DATA __ALLOC_3 __ALLOC_1  8 1    10 11 12 13
__ALLOC_3:
    .DATA __ALLOC_4 __ALLOC_2 12 1    1 2 3 4 5 6 7 8
__ALLOC_4:
    .DATA 0 __ALLOC_3  8 1            1 2 3 4
