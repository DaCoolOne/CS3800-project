import stdio "stdio"
import pcb "pcb.lispp"

# Initializes the Process Array
const int_procSize 10
global **int_proc 10

# Initializes the Memory Address Blocks Array
const int_memBlocksSize 256
global *int_memBlocks 256

# This triggers every 2^15 ticks
function KERNEL.TimerTick() {
    (stdio.print "\u")
    (stdio.newline)

    (KERNEL.SETTIMER 0x8000)
}

# Print from a user program
function KERNEL.UserDefined1() {
    (stdio.print (CastIntPtrStr (ptr (KERNEL.USRADDR KERNEL.int_UserReg0))))
    (stdio.newline)
}

function begin() {
    (KERNEL.RETI)
}

function initializeProcessArray() {

    # Initializes all of the process indeces to -1
    for int_i (< int_i int_procSize) (++ int_i) {
        (<> **int_proc (ptr -1) int_i)
    }
}

function initializeMemoryBlocks() {

    # Initializes all memBlocks to 0x0000 which means not used
    for int_i (< int_i int_memBlocksSize) (++ int_i) {
        (<> *int_memBlocks 0 int_i)
    }

    # Initializes the first KERNEL.*int_BINEND high byte memBlocks to 0x0001 for Kernel Block
    set int_i 0 for int_i (<= int_i (>> (addr KERNEL.*int_BINEND) 8)) (++ int_i) {
        (<> *int_memBlocks 1 int_i)
    }
}

# Get block where PCB is located
# Shift block to be high byte which is block
# Low byte is const PCB state
# bitwise or values
# pass in id of the process
# Get block where pcb is located
# Create a value who's high byte is pcb block and low byte is the pcb state
# ptr convert to pointer

function main() {
    (initializeProcessArray)
    (initializeMemoryBlocks)

    (pcb.createProcess)
    (pcb.createProcess)
    (pcb.createProcess)
    (pcb.createProcess)
    (pcb.createProcess)

    (stdio.newline)

    # Break us out of kernel mode in a dumb way
    # (enableUserMode)

    loop { }
}