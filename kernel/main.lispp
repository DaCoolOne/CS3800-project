import stdio "stdio"
import process "./process.lispp"
import memory "./pcb/memory.lispp"
import stack "./pcb/stack.lispp"
import disk "./disk.lispp"

# Initializes the Process Array
const int_procSize 10
global **int_proc 10

# Initializes the Memory Address Blocks Array
const int_memBlocksSize 256
global *int_memBlocks 256

function allocateEmptySlots() {
    # BXOR is technically a != function
    set int_isFull 0
    while (&& (disk.hasNextFile) (= int_isFull 0)) {
        set int_isFull (process.createProcess (disk.getNextFile))
    }
}

function killProcessInterrupt() {
    set int_current (process.getCurrentlyRunningProcess)

    if (= int_current -1) {

    }
    else {
        (process.killProcess int_current)
        (allocateEmptySlots)
    }
    
    set int_next (process.getNextProcess int_current)

    (stdio.newline)
    (stdio.print "Killing ")
    (stdio.printS int_current)
    (stdio.print " and switching to ")
    (stdio.printS int_next)
    (stdio.newline)

    if (= int_next -1) {
        (stdio.print "All tasks finished, shutting down.")
        (stdio.newline)
        (KERNEL.SHUTDOWN)
    }

    (KERNEL.SETTIMER 0x0010)

    # Switch to next availible process
    (process.switchProcess int_current int_next)
}

# This triggers every 2^15 ticks
function KERNEL.TimerTick() {
    # Switch programs

    # Find the next availible process
    set int_current (process.getCurrentlyRunningProcess)
    (stack.saveStack int_current)
    
    set int_next (process.getNextProcess int_current)
    if (= int_next -1) {
        set int_next int_current
    }

    (KERNEL.SETTIMER 0x0050)

    # Switch to next availible process
    (stdio.newline)
    (stdio.print "Switching from Process ")
    (stdio.printU int_current)
    (stdio.print " to ")
    (stdio.printU int_next)
    (stdio.newline)
    (process.switchProcess int_current int_next)
}

function KERNEL.BadIns() {
    set *int_mem (ptr 0)
    set int_lastInstruction ([] *int_mem KERNEL.int_LastUserIns)

    # BXOR is technically a != operation
    if (^ int_lastInstruction 0xFF00) {
        (stdio.print "Bad Instruction at ")
        (stdio.printHex KERNEL.int_LastUserIns)
        (stdio.print " - ")
        (stdio.printHex int_lastInstruction)
        if (= (>> int_lastInstruction 8) 0x01) {
            set int_lastInstruction ([] *int_mem (++ KERNEL.int_LastUserIns))
            (stdio.print " CJMP -> ")
            (stdio.printHex int_lastInstruction)
        }
        (stdio.newline)
    }

    (killProcessInterrupt)
}
function KERNEL.StackOverflow() {
    (stdio.print "Stack Overflow!")
    (stdio.newline)

    (killProcessInterrupt)
}
function KERNEL.StackUnderflow() {
    (stdio.print "Stack Underflow!")
    (stdio.newline)

    (killProcessInterrupt)
}
function KERNEL.BadMemAccess() {
    (stdio.print "Bad Mem Access!")
    (stdio.newline)

    (killProcessInterrupt)
}

# Print from a user program
function KERNEL.UserDefined1() {
    set int_usrAddress (KERNEL.USRADDR KERNEL.int_UserReg0)
    if (i int_usrAddress) {
        (stdio.print (CastIntPtrStr (ptr int_usrAddress)))
        (stdio.newline)
    }
    else {
        (stdio.print "Bad request, cannot print")
        (stdio.newline)

        (killProcessInterrupt)
    }
}

# Print a signed number
function KERNEL.UserDefined2() {
    (stdio.printS KERNEL.int_UserReg0)
    (stdio.newline)
}

# Print a unsigned number
function KERNEL.UserDefined3() {
    (stdio.printU KERNEL.int_UserReg0)
    (stdio.newline)
}

# Print a hex number
function KERNEL.UserDefined4() {
    (stdio.printHex KERNEL.int_UserReg0)
    (stdio.newline)
}

# Print a string and number pair
function KERNEL.UserDefined5() {
    
    set int_usrAddress (KERNEL.USRADDR KERNEL.int_UserReg0)
    if (i int_usrAddress) {
        (stdio.print (CastIntPtrStr (ptr int_usrAddress)))
        (stdio.newline)
    }
    else {
        (stdio.print "Bad request, cannot print")
        (stdio.newline)

        (killProcessInterrupt)
    }

    (stdio.printS KERNEL.int_UserReg1)
    (stdio.newline)
}

function initializeProcessArray() {

    # Initializes all of the process indeces to -1
    for int_i (< int_i int_procSize) (++ int_i) {
        (<> **int_proc (ptr -1) int_i)
    }
}

function initializeMemoryBlocks() {

    # Initializes all memBlocks to 0x0000 which means not used
    for int_i (< int_i int_memBlocksSize) (++ int_i) {
        (<> *int_memBlocks 0 int_i)
    }

    # Initializes the first KERNEL.*int_BINEND high byte memBlocks to 0x0001 for Kernel Block
    set int_i 0 for int_i (<= int_i (>> (addr KERNEL.*int_BINEND) 8)) (++ int_i) {
        (<> *int_memBlocks 1 int_i)
    }
}

# Initialization of the kernel.
function main() {
    (stdio.newline)

    (initializeProcessArray)
    (initializeMemoryBlocks)

    (stdio.print "KERNEL Memory BINARY END: 0x")
    (stdio.printHex (addr KERNEL.*int_BINEND))
    (stdio.newline)
    (stdio.print "Number of open memory blocks (After Kernel Allocation): ")
    (stdio.printU (memory.getNumberOfOpenMemBlocks))
    (stdio.newline)
    (stdio.newline)

    (stdio.print "Creating Processes")(stdio.newline)
    (allocateEmptySlots)

    (stdio.newline)
    (stdio.print "Number of open memory blocks (After Process Allocation): ")
    (stdio.printU (memory.getNumberOfOpenMemBlocks))
    (stdio.newline)

    (stdio.newline)

    # Start running a process
    (stdio.print "LAUNCH PROCESS")
    (stdio.newline)
    (KERNEL.SETTIMER 0x0010)
    (memory.unlockMemory 0)
    (stack.loadStackAndRun 0)

}
