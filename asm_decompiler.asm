

; A simple assembly decompiler, written in assembly.
; Written for the processor in this directory.

; Why? Idk. Maybe I hate myself. Maybe I think it'll reduce the number of years in purgatory if I suffer on this earth first?

.ALIAS EXT_BUFFER_IN 0x02

.ALIAS CHARACTER_OFFSET 0x14
.ALIAS CURRENT_CHAR_PAIR 0x15
.ALIAS CURRENT_CHAR 0x16

.ALIAS TEXT_OFFSET 0x80
.ALIAS NUM_TO_TEXT_1 0x81
.ALIAS NUM_TO_TEXT_2 0x82
.ALIAS DIGIT_TO_TEXT 0x83

.ALIAS INS_CTR 0x84

.ALIAS PRINT_ADDR 0x85

.ALIAS INS1 0x86
.ALIAS INS2 0x87
.ALIAS INS3 0x88
.ALIAS INS4 0x89
.ALIAS F_INS2 0x8A

.ALIAS TEMP 0x90
.ALIAS TEMP2 0x91
.ALIAS TEMP3 0x92

.ORG 0x00
    JMP start

.ORG 0x0C
quit:
    PRINTFLUSH
    SHUTDOWN

start:
    ;SET PRINT_ADDR TXT_WELCOME
    ;CALL PRINT
loop:
    CALL NEWLINE
    CALL WRITE_NEXT_INS
    RJMP loop

NEWLINE:
    SET TEMP 10
    PRINTL TEMP
    RET

PRINT_SINGLE_DIGIT:
    MOV TEMP DIGIT_TO_TEXT
    GTEQI TEMP 10
    CJMP TEMP PRINT_LETTER
PRINT_NUM:
    SET TEMP 48
    ADD TEMP DIGIT_TO_TEXT TEMP
    PRINTL TEMP
    RET
PRINT_LETTER:
    SET TEMP 55
    ADD TEMP DIGIT_TO_TEXT TEMP
    PRINTL TEMP
    RET

PRINT_NUM_16_BIT:
    CALL PRINT_NUM_PREFIX
    CALL PRINT_NUM_AS_HEX

    RET

PRINT_NUM_32_BIT:
    CALL PRINT_NUM_PREFIX
    CALL PRINT_NUM_AS_HEX
    SWP NUM_TO_TEXT_1 NUM_TO_TEXT_2
    CALL PRINT_NUM_AS_HEX
    SWP NUM_TO_TEXT_1 NUM_TO_TEXT_2
    
    RET

PRINT_NUM_PREFIX:
    SET TEMP 0x3078 ; 0
    PRINTH TEMP
    PRINTL TEMP
    RET

PRINT_NUM_AS_HEX:
    MOV DIGIT_TO_TEXT NUM_TO_TEXT_1
    RSHIFTI DIGIT_TO_TEXT 4
    ANDI DIGIT_TO_TEXT 0xF
    CALL PRINT_SINGLE_DIGIT
    
    MOV DIGIT_TO_TEXT NUM_TO_TEXT_1
    ANDI DIGIT_TO_TEXT 0xF
    CALL PRINT_SINGLE_DIGIT
    
    RET

PRINT:
    SET CHARACTER_OFFSET 0x00

PRINT_prnt_loop:
    ; Fetch the next character pair
    CALL PRINT_fetch_next
    
    ; Copy data, check for null character
    MOV CURRENT_CHAR CURRENT_CHAR_PAIR
    ANDI CURRENT_CHAR 0xFF00
    CJMP CURRENT_CHAR PRINT_success_got_c1
    JMP PRINT_stop

PRINT_fetch_next:
    MOV CURRENT_CHAR_PAIR PRINT_ADDR
    ADD CURRENT_CHAR_PAIR CURRENT_CHAR_PAIR CHARACTER_OFFSET
    LD CURRENT_CHAR_PAIR
    INC CHARACTER_OFFSET
    RET

PRINT_success_got_c1:
    ; Print current char
    PRINTH CURRENT_CHAR

    ; Copy data, check for null character
    MOV CURRENT_CHAR CURRENT_CHAR_PAIR
    ANDI CURRENT_CHAR 0x00FF
    CJMP CURRENT_CHAR PRINT_success_got_c2
    JMP PRINT_stop

PRINT_success_got_c2:
    PRINTL CURRENT_CHAR
    JMP PRINT_prnt_loop

PRINT_stop:
    PRINTFLUSH
    RET


GET_NEXT_INS:
    SET TEMP2 0
    EXTFETCH TEMP2 TEMP2 INS_CTR
    MOV INS1 EXT_BUFFER_IN
    INC INS_CTR

    EXTFETCH TEMP2 TEMP2 INS_CTR
    MOV INS2 EXT_BUFFER_IN
    INC INS_CTR

    RET

GET_INS_EXT:
    SET TEMP2 0
    EXTFETCH TEMP2 TEMP2 INS_CTR
    MOV INS3 EXT_BUFFER_IN
    INC INS_CTR

    EXTFETCH TEMP2 TEMP2 INS_CTR
    MOV INS4 EXT_BUFFER_IN
    INC INS_CTR

    MOV F_INS2 INS3
    LSHIFTI F_INS2 8
    AND F_INS2 F_INS2 INS4
    RET

WRITE_NEXT_INS:
    CALL GET_NEXT_INS
    MOV TEMP INS1
    ANDI TEMP 0x80
    CJMP TEMP UPPER_WRITE

LOWER_WRITE:
    LSHIFTI TEMP 1
    SET TEMP2 JUMP_TABLE
    ADD TEMP TEMP TEMP2
    MOV TEMP3 TEMP
    INC TEMP3
    LD TEMP
    LD TEMP3
    SET TEMP2 JUMP_POS
    ST TEMP TEMP2
    INC TEMP2
    ST TEMP3 TEMP2
    RJMP JUMP_POS

UPPER_WRITE:
    LSHIFTI TEMP 1
    SET TEMP2 JUMP_TABLE_KERN
    ADD TEMP TEMP TEMP2
    LD TEMP
    SET TEMP2 JUMP_POS
    ST TEMP TEMP2
    RJMP JUMP_POS

; Overwritten with the value to jump to
JUMP_POS:
    NOP
    NOP
JUMP_TABLE:
    JMP INS_RJMP         ; 0x00
    JMP INS_CJMP         ; 0x01
    JMP INS_SET          ; 0x02
    JMP INS_MOV          ; 0x03
    JMP INS_CALL         ; 0x04
    JMP INS_RET          ; 0x05
    JMP INS_INC          ; 0x06
    JMP INS_DEC          ; 0x07
    JMP INS_LD           ; 0x08
    JMP INS_ST           ; 0x09
    JMP INS_DNE          ; 0x0A
    JMP INS_DNE          ; 0x0B
    JMP INS_DNE          ; 0x0C
    JMP INS_DNE          ; 0x0D
    JMP INS_DNE          ; 0x0E
    JMP INS_DNE          ; 0x0F
    JMP INS_DNE          ; 0x10
    JMP INS_DNE          ; 0x11
    JMP INS_DNE          ; 0x12
    JMP INS_DNE          ; 0x13
    JMP INS_DNE          ; 0x14
    JMP INS_DNE          ; 0x15
    JMP INS_DNE          ; 0x16
    JMP INS_DNE          ; 0x17
    JMP INS_DNE          ; 0x18
    JMP INS_DNE          ; 0x19
    JMP INS_DNE          ; 0x1A
    JMP INS_DNE          ; 0x1B
    JMP INS_DNE          ; 0x1C
    JMP INS_DNE          ; 0x1D
    JMP INS_DNE          ; 0x1E
    JMP INS_DNE          ; 0x1F
    JMP INS_DNE          ; 0x20
    JMP INS_DNE          ; 0x21
    JMP INS_DNE          ; 0x22
    JMP INS_DNE          ; 0x23
    JMP INS_DNE          ; 0x24
    JMP INS_DNE          ; 0x25
    JMP INS_DNE          ; 0x26
    JMP INS_DNE          ; 0x27
    JMP INS_DNE          ; 0x28
    JMP INS_DNE          ; 0x29
    JMP INS_DNE          ; 0x2A
    JMP INS_DNE          ; 0x2B
    JMP INS_DNE          ; 0x2C
    JMP INS_DNE          ; 0x2D
    JMP INS_DNE          ; 0x2E
    JMP INS_DNE          ; 0x2F
    JMP INS_DNE          ; 0x30
    JMP INS_DNE          ; 0x31
    JMP INS_DNE          ; 0x32
    JMP INS_DNE          ; 0x33
    JMP INS_DNE          ; 0x34
    JMP INS_DNE          ; 0x35
    JMP INS_DNE          ; 0x36
    JMP INS_DNE          ; 0x37
    JMP INS_DNE          ; 0x38
    JMP INS_DNE          ; 0x39
    JMP INS_DNE          ; 0x3A
    JMP INS_DNE          ; 0x3B
    JMP INS_DNE          ; 0x3C
    JMP INS_DNE          ; 0x3D
    JMP INS_DNE          ; 0x3E
    JMP INS_RAISE        ; 0x3F
; ALU OPERATIONS
    JMP INS_ADD          ; 0x40
    JMP INS_SUB          ; 0x41
    JMP INS_DNE          ; 0x42
    JMP INS_DIV          ; 0x43
    JMP INS_LSHIFT       ; 0x44
    JMP INS_RSHIFT       ; 0x45
    JMP INS_AND          ; 0x46
    JMP INS_OR           ; 0x47
    JMP INS_XOR          ; 0x48
    JMP INS_BAND         ; 0x49
    JMP INS_BOR          ; 0x4A
    JMP INS_BXOR         ; 0x4B
    JMP INS_MOD          ; 0x4C
    JMP INS_GTR          ; 0x4D
    JMP INS_EQ           ; 0x4E
    JMP INS_GTEQ         ; 0x4F
    JMP INS_FADD         ; 0x50
    JMP INS_FSUB         ; 0x51
    JMP INS_MUL          ; 0x52
    JMP INS_FMUL         ; 0x53
    JMP INS_FDIV         ; 0x54
    JMP INS_DIVMOD       ; 0x55
    JMP INS_DNE          ; 0x56
    JMP INS_DNE          ; 0x57
    JMP INS_DNE          ; 0x58
    JMP INS_DNE          ; 0x59
    JMP INS_DNE          ; 0x5A
    JMP INS_DNE          ; 0x5B
    JMP INS_DNE          ; 0x5C
    JMP INS_DNE          ; 0x5D
    JMP INS_DNE          ; 0x5E
    JMP INS_DNE          ; 0x5F
    JMP INS_XORI         ; 0x60
    JMP INS_ANDI         ; 0x61
    JMP INS_ORI          ; 0x62
    JMP INS_BNOT         ; 0x63
    JMP INS_EQI          ; 0x64
    JMP INS_GTRI         ; 0x65
    JMP INS_GTEQI        ; 0x66
    JMP INS_LSSI         ; 0x67
    JMP INS_LSEQI        ; 0x68
    JMP INS_RSHIFTI      ; 0x69
    JMP INS_LSHIFTI      ; 0x6A
    JMP INS_DNE          ; 0x6B
    JMP INS_DNE          ; 0x6C
    JMP INS_DNE          ; 0x6D
    JMP INS_DNE          ; 0x6E
    JMP INS_DNE          ; 0x6F
    JMP INS_DNE          ; 0x70
    JMP INS_DNE          ; 0x71
    JMP INS_DNE          ; 0x72
    JMP INS_DNE          ; 0x73
    JMP INS_DNE          ; 0x74
    JMP INS_DNE          ; 0x75
    JMP INS_DNE          ; 0x76
    JMP INS_DNE          ; 0x77
    JMP INS_DNE          ; 0x78
    JMP INS_DNE          ; 0x79
    JMP INS_DNE          ; 0x7A
    JMP INS_DNE          ; 0x7B
    JMP INS_DNE          ; 0x7C
    JMP INS_DNE          ; 0x7D
    JMP INS_DNE          ; 0x7E
    JMP INS_DNE          ; 0x7F
; Begin Kernel level commands
JUMP_TABLE_KERN:
    JMP INS_UNLOCK       ; 0x80
    JMP INS_LOCK         ; 0x81
    JMP INS_PUSH         ; 0x82
    JMP INS_POP          ; 0x83
    JMP INS_USR_ADDR     ; 0x84
    JMP INS_EXTFETCH     ; 0x85
    JMP INS_EXTWRITE     ; 0x86
    JMP INS_DNE          ; 0x87
    JMP INS_DNE          ; 0x88
    JMP INS_DNE          ; 0x89
    JMP INS_DNE          ; 0x8A
    JMP INS_DNE          ; 0x8B
    JMP INS_DNE          ; 0x8C
    JMP INS_DNE          ; 0x8D
    JMP INS_DNE          ; 0x8E
    JMP INS_DNE          ; 0x8F
    JMP INS_DNE          ; 0x90
    JMP INS_DNE          ; 0x91
    JMP INS_DNE          ; 0x92
    JMP INS_DNE          ; 0x93
    JMP INS_DNE          ; 0x94
    JMP INS_DNE          ; 0x95
    JMP INS_DNE          ; 0x96
    JMP INS_DNE          ; 0x97
    JMP INS_DNE          ; 0x98
    JMP INS_DNE          ; 0x99
    JMP INS_DNE          ; 0x9A
    JMP INS_DNE          ; 0x9B
    JMP INS_DNE          ; 0x9C
    JMP INS_DNE          ; 0x9D
    JMP INS_DNE          ; 0x9E
    JMP INS_DNE          ; 0x9F
    JMP INS_DNE          ; 0xA0
    JMP INS_DNE          ; 0xA1
    JMP INS_DNE          ; 0xA2
    JMP INS_DNE          ; 0xA3
    JMP INS_DNE          ; 0xA4
    JMP INS_DNE          ; 0xA5
    JMP INS_DNE          ; 0xA6
    JMP INS_DNE          ; 0xA7
    JMP INS_DNE          ; 0xA8
    JMP INS_DNE          ; 0xA9
    JMP INS_DNE          ; 0xAA
    JMP INS_DNE          ; 0xAB
    JMP INS_DNE          ; 0xAC
    JMP INS_DNE          ; 0xAD
    JMP INS_DNE          ; 0xAE
    JMP INS_DNE          ; 0xAF
    JMP INS_DNE          ; 0xB0
    JMP INS_DNE          ; 0xB1
    JMP INS_DNE          ; 0xB2
    JMP INS_DNE          ; 0xB3
    JMP INS_DNE          ; 0xB4
    JMP INS_DNE          ; 0xB5
    JMP INS_DNE          ; 0xB6
    JMP INS_DNE          ; 0xB7
    JMP INS_DNE          ; 0xB8
    JMP INS_DNE          ; 0xB9
    JMP INS_DNE          ; 0xBA
    JMP INS_DNE          ; 0xBB
    JMP INS_DNE          ; 0xBC
    JMP INS_DNE          ; 0xBD
    JMP INS_DNE          ; 0xBE
    JMP INS_DNE          ; 0xBF
    JMP INS_DNE          ; 0xC0
    JMP INS_DNE          ; 0xC1
    JMP INS_DNE          ; 0xC2
    JMP INS_DNE          ; 0xC3
    JMP INS_DNE          ; 0xC4
    JMP INS_DNE          ; 0xC5
    JMP INS_DNE          ; 0xC6
    JMP INS_DNE          ; 0xC7
    JMP INS_DNE          ; 0xC8
    JMP INS_DNE          ; 0xC9
    JMP INS_DNE          ; 0xCA
    JMP INS_DNE          ; 0xCB
    JMP INS_DNE          ; 0xCC
    JMP INS_DNE          ; 0xCD
    JMP INS_DNE          ; 0xCE
    JMP INS_DNE          ; 0xCF
    JMP INS_DNE          ; 0xD0
    JMP INS_DNE          ; 0xD1
    JMP INS_DNE          ; 0xD2
    JMP INS_DNE          ; 0xD3
    JMP INS_DNE          ; 0xD4
    JMP INS_DNE          ; 0xD5
    JMP INS_DNE          ; 0xD6
    JMP INS_DNE          ; 0xD7
    JMP INS_DNE          ; 0xD8
    JMP INS_DNE          ; 0xD9
    JMP INS_DNE          ; 0xDA
    JMP INS_DNE          ; 0xDB
    JMP INS_DNE          ; 0xDC
    JMP INS_DNE          ; 0xDD
    JMP INS_DNE          ; 0xDE
    JMP INS_DNE          ; 0xDF
    JMP INS_DNE          ; 0xE0
    JMP INS_DNE          ; 0xE1
    JMP INS_DNE          ; 0xE2
    JMP INS_DNE          ; 0xE3
    JMP INS_DNE          ; 0xE4
    JMP INS_DNE          ; 0xE5
    JMP INS_DNE          ; 0xE6
    JMP INS_DNE          ; 0xE7
    JMP INS_DNE          ; 0xE8
    JMP INS_DNE          ; 0xE9
    JMP INS_DNE          ; 0xEA
    JMP INS_DNE          ; 0xEB
    JMP INS_DNE          ; 0xEC
    JMP INS_DNE          ; 0xED
    JMP INS_DNE          ; 0xEE
    JMP INS_DNE          ; 0xEF
    JMP INS_DNE          ; 0xF0
    JMP INS_DNE          ; 0xF1
    JMP INS_DNE          ; 0xF2
    JMP INS_DNE          ; 0xF3
    JMP INS_DNE          ; 0xF4
    JMP INS_DNE          ; 0xF5
    JMP INS_DNE          ; 0xF6
    JMP INS_DNE          ; 0xF7
    JMP INS_DNE          ; 0xF8
    JMP INS_DNE          ; 0xF9
    JMP INS_DNE          ; 0xFA
    JMP INS_DNE          ; 0xFB
    JMP INS_PRINTH       ; 0xFC
    JMP INS_PRINTL       ; 0xFD
    JMP INS_PRINTFLUSH   ; 0xFE
    JMP INS_SHUTDOWN     ; 0xFF

INS_DNE:
    SET PRINT_ADDR TXT_DATA
    CALL PRINT

    MOV NUM_TO_TEXT_1 INS1
    LSHIFTI NUM_TO_TEXT_1 8
    OR NUM_TO_TEXT_1 NUM_TO_TEXT_2 INS2
    CALL PRINT_NUM_16_BIT
    RET

SINGLE_ARG_PRINT:
    CALL PRINT

    MOV NUM_TO_TEXT_1 INS2
    CALL PRINT_NUM_16_BIT

    RET

SINGLE_REG_ALU:
    CALL PRINT

    CALL SINGLE_ARG_PRINT
    
    SET TEMP 0xA ; space
    PRINTL TEMP
    MOV NUM_TO_TEXT_1 INS3
    CALL PRINT_NUM_16_BIT

    SET TEMP 0xA ; space
    PRINTL TEMP
    MOV NUM_TO_TEXT_1 INS4
    CALL PRINT_NUM_16_BIT

    RET

SINGLE_ARG_ADDR_PRINT:
    CALL GET_INS_EXT
SINGLE_ARG_ADDR_PRINT_NO_FETCH:
    CALL SINGLE_ARG_PRINT
    MOV NUM_TO_TEXT_1 INS3
    MOV NUM_TO_TEXT_2 INS4

    SET TEMP 0xA ; space
    PRINTL TEMP

    CALL PRINT_NUM_32_BIT

    RET

ADDR_ONLY_PRINT:
    CALL GET_INS_EXT

    MOV NUM_TO_TEXT_1 INS3
    MOV NUM_TO_TEXT_2 INS4

    SET TEMP 0xA ; space
    PRINTL TEMP

    CALL PRINT_NUM_32_BIT

    RET

NO_ARG_PRINT:
    CALL PRINT
    RET

INS_RJMP:
    SET PRINT_ADDR TXT_RJMP
    JMP SINGLE_ARG_PRINT

INS_CJMP:
    CALL GET_INS_EXT
    MOV TEMP INS3
    EQI TEMP 0xFF
    CJMP TEMP INS_JMP
    SET PRINT_ADDR TXT_CJMP
    JMP SINGLE_ARG_ADDR_PRINT_NO_FETCH
INS_JMP:
    SET PRINT_ADDR TXT_JMP
    JMP SINGLE_ARG_ADDR_PRINT_NO_FETCH

INS_SET:
    SET PRINT_ADDR TXT_SET
    JMP SINGLE_ARG_ADDR_PRINT

INS_MOV:
    CALL GET_INS_EXT
    CJMP INS3 INS_SWP
    SET PRINT_ADDR TXT_MOV
    JMP SINGLE_ARG_ADDR_PRINT_NO_FETCH
INS_SWP:
    SET PRINT_ADDR TXT_SWP
    JMP SINGLE_ARG_ADDR_PRINT_NO_FETCH

INS_LD:
    SET PRINT_ADDR TXT_LD
    JMP SINGLE_ARG_PRINT
INS_ST:
    SET PRINT_ADDR TXT_ST
    JMP SINGLE_ARG_ADDR_PRINT

INS_CALL:
    SET PRINT_ADDR TXT_CALL
    JMP ADDR_ONLY_PRINT
INS_RET:
    SET PRINT_ADDR TXT_RET
    JMP NO_ARG_PRINT

INS_INC:
    SET PRINT_ADDR TXT_INC
    JMP SINGLE_ARG_PRINT
INS_DEC:
    SET PRINT_ADDR TXT_DEC
    JMP SINGLE_ARG_PRINT

INS_ADD:
    SET PRINT_ADDR TXT_ADD
    JMP SINGLE_REG_ALU
INS_SUB:
    SET PRINT_ADDR TXT_SUB
    JMP SINGLE_REG_ALU
INS_DIV:
    SET PRINT_ADDR TXT_DIV
    JMP SINGLE_REG_ALU
INS_LSHIFT:
    SET PRINT_ADDR TXT_LSHIFT
    JMP SINGLE_REG_ALU
INS_RSHIFT:
    SET PRINT_ADDR TXT_RSHIFT
    JMP SINGLE_REG_ALU
INS_AND:
    SET PRINT_ADDR TXT_AND
    JMP SINGLE_REG_ALU
INS_OR:
    SET PRINT_ADDR TXT_OR
    JMP SINGLE_REG_ALU
INS_XOR:
    SET PRINT_ADDR TXT_XOR
    JMP SINGLE_REG_ALU
INS_BAND:
    SET PRINT_ADDR TXT_BAND
    JMP SINGLE_REG_ALU
INS_BOR:
    SET PRINT_ADDR TXT_BOR
    JMP SINGLE_REG_ALU
INS_BXOR:
    SET PRINT_ADDR TXT_BXOR
    JMP SINGLE_REG_ALU
INS_MOD:
    SET PRINT_ADDR TXT_MOD
    JMP SINGLE_REG_ALU
INS_GTR:
    SET PRINT_ADDR TXT_GTR
    JMP SINGLE_REG_ALU
INS_EQ:
    SET PRINT_ADDR TXT_EQ
    JMP SINGLE_REG_ALU
INS_GTEQ:
    SET PRINT_ADDR TXT_GTEQ
    JMP SINGLE_REG_ALU
INS_FADD:
    SET PRINT_ADDR TXT_FADD
    JMP SINGLE_REG_ALU
INS_FSUB:
    SET PRINT_ADDR TXT_FSUB
    JMP SINGLE_REG_ALU
INS_MUL:
    SET PRINT_ADDR TXT_MUL
    JMP SINGLE_REG_ALU
INS_FMUL:
    SET PRINT_ADDR TXT_FMUL
    JMP SINGLE_REG_ALU
INS_FDIV:
    SET PRINT_ADDR TXT_FDIV
    JMP SINGLE_REG_ALU
INS_DIVMOD:
    SET PRINT_ADDR TXT_DIVMOD
    JMP SINGLE_REG_ALU
INS_XORI:
    SET PRINT_ADDR TXT_XORI
    JMP SINGLE_ARG_ADDR_PRINT
INS_ANDI:
    SET PRINT_ADDR TXT_ANDI
    JMP SINGLE_ARG_ADDR_PRINT
INS_ORI:
    SET PRINT_ADDR TXT_ORI
    JMP SINGLE_ARG_ADDR_PRINT
INS_BNOT:
    SET PRINT_ADDR TXT_BNOT
    JMP SINGLE_ARG_PRINT
INS_EQI:
    SET PRINT_ADDR TXT_EQI
    JMP SINGLE_ARG_ADDR_PRINT
INS_GTRI:
    SET PRINT_ADDR TXT_GTRI
    JMP SINGLE_ARG_ADDR_PRINT
INS_GTEQI:
    SET PRINT_ADDR TXT_GTEQI
    JMP SINGLE_ARG_ADDR_PRINT
INS_LSSI:
    SET PRINT_ADDR TXT_LSSI
    JMP SINGLE_ARG_ADDR_PRINT
INS_LSEQI:
    SET PRINT_ADDR TXT_LSEQI
    JMP SINGLE_ARG_ADDR_PRINT
INS_RSHIFTI:
    SET PRINT_ADDR TXT_RSHIFTI
    JMP SINGLE_ARG_ADDR_PRINT
INS_LSHIFTI:
    SET PRINT_ADDR TXT_LSHIFTI
    JMP SINGLE_ARG_ADDR_PRINT

INS_RAISE:
    SET PRINT_ADDR TXT_RAISE
    JMP SINGLE_ARG_PRINT
INS_LOCK:
    SET PRINT_ADDR TXT_LOCK
    JMP SINGLE_ARG_PRINT
INS_UNLOCK:
    SET PRINT_ADDR TXT_UNLOCK
    JMP SINGLE_ARG_PRINT
INS_PUSH:
    SET PRINT_ADDR TXT_PUSH
    JMP SINGLE_ARG_PRINT
INS_POP:
    SET PRINT_ADDR TXT_POP
    JMP SINGLE_ARG_PRINT
INS_USR_ADDR:
    SET PRINT_ADDR TXT_USR_ADDR
    JMP SINGLE_ARG_PRINT

INS_EXTFETCH:
    SET PRINT_ADDR TXT_EXTFETCH
    JMP SINGLE_REG_ALU
INS_EXTWRITE:
    SET PRINT_ADDR TXT_EXTWRITE
    JMP SINGLE_REG_ALU

INS_PRINTL:
    SET PRINT_ADDR TXT_PRINTL
    JMP SINGLE_ARG_PRINT
INS_PRINTH:
    SET PRINT_ADDR TXT_PRINTH
    JMP SINGLE_ARG_PRINT

INS_PRINTFLUSH:
    SET PRINT_ADDR TXT_PRINTFLUSH
    JMP NO_ARG_PRINT
INS_SHUTDOWN:
    SET PRINT_ADDR TXT_SHUTDOWN
    JMP NO_ARG_PRINT

TXT_DATA:
    .TEXT ".DATA "
TXT_RJMP:
    .TEXT "RJMP "
TXT_CJMP:
    .TEXT "CJMP "
TXT_JMP:
    .TEXT "JMP "
TXT_SET:
    .TEXT "SET "
TXT_MOV:
    .TEXT "MOV "
TXT_SWP:
    .TEXT "SWP "
TXT_LD:
    .TEXT "LD "
TXT_ST:
    .TEXT "ST "
TXT_CALL:
    .TEXT "CALL "
TXT_RET:
    .TEXT "RET "
TXT_INC:
    .TEXT "INC "
TXT_DEC:
    .TEXT "DEC "
TXT_ADD:
    .TEXT "ADD "
TXT_SUB:
    .TEXT "SUB "
TXT_DIV:
    .TEXT "DIV "
TXT_LSHIFT:
    .TEXT "LSHIFT "
TXT_RSHIFT:
    .TEXT "RSHIFT "
TXT_AND:
    .TEXT "AND "
TXT_OR:
    .TEXT "OR "
TXT_XOR:
    .TEXT "XOR "
TXT_BAND:
    .TEXT "BAND "
TXT_BOR:
    .TEXT "BOR "
TXT_BXOR:
    .TEXT "BXOR "
TXT_MOD:
    .TEXT "MOD "
TXT_GTR:
    .TEXT "GTR "
TXT_EQ:
    .TEXT "EQ "
TXT_GTEQ:
    .TEXT "GTEQ "
TXT_FADD:
    .TEXT "FADD "
TXT_FSUB:
    .TEXT "FSUB "
TXT_MUL:
    .TEXT "MUL "
TXT_FMUL:
    .TEXT "FMUL "
TXT_FDIV:
    .TEXT "FDIV "
TXT_DIVMOD:
    .TEXT "DIVMOD "
TXT_XORI:
    .TEXT "XORI "
TXT_ANDI:
    .TEXT "ANDI "
TXT_ORI:
    .TEXT "ORI "
TXT_BNOT:
    .TEXT "BNOT "
TXT_EQI:
    .TEXT "EQI "
TXT_GTRI:
    .TEXT "GTRI "
TXT_GTEQI:
    .TEXT "GTEQI "
TXT_LSSI:
    .TEXT "LSSI "
TXT_LSEQI:
    .TEXT "LSEQI "
TXT_RSHIFTI:
    .TEXT "RSHIFTI "
TXT_LSHIFTI:
    .TEXT "LSHIFTI "
TXT_RAISE:
    .TEXT "RAISE "
TXT_LOCK:
    .TEXT "LOCK "
TXT_UNLOCK:
    .TEXT "UNLOCK "
TXT_PUSH:
    .TEXT "PUSH "
TXT_POP:
    .TEXT "POP "
TXT_USR_ADDR:
    .TEXT "USR_ADDR "
TXT_EXTFETCH:
    .TEXT "EXTFETCH "
TXT_EXTWRITE:
    .TEXT "EXTWRITE "
TXT_PRINTH:
    .TEXT "PRINTH "
TXT_PRINTL:
    .TEXT "PRINTL "
TXT_PRINTFLUSH:
    .TEXT "PRINTFLUSH "
TXT_SHUTDOWN:
    .TEXT "SHUTDOWN "

TXT_WELCOME:
    .DATA 0x3B20
    .TEXT "Scott's assembly decompiler (in assembly!)"
